#summary Configure PostgreSQL database with RFXcmd

= Introduction =

NOTE! This is under work.

= Details =

 * The instruction has been tested successfully under Ubuntu 14.04

= Install PostegrSQL =

{{{
$ sudo apt-get install postgresql
}}}

= Install python extension =

To be able to use PostgreSQL, the Python extension needs to be installed. This can easily be done with following command on Ubuntu.

{{{
$ sudo apt-get install python-psycopg2
}}}

= Create database and user =

Use the postgre user to do all the initial settings. Enter your password at the password request.

{{{
$ sudo -i -u postgres
}}}

Create user and database

{{{
$ psql -c 'CREATE USER rfxuser WITH PASSWORD 'rfxuser1';'
$ psql -c 'CREATE DATABASE rfx OWNER rfxuser;'
}}}

Now insert the table from the pre-defined file in the doc folder, the table will be created in the database rfx as defined in the command.

{{{
$ psql -f rfxcmd/doc/rfxcmd_pgsql.txt rfx
}}}

Exit back to your own user

{{{
$ exit
}}}

= RFXcmd configuration =

The database configuration has to be set in the config.xml file. If the pgsql configuration is changed when RFXcmd is running, RFXcmd has be stopped and started again for the changes to take effect.

Example:
{{{
	<!-- PgSQL -->
	<pgsql_active>yes</pgsql_active>
	<pgsql_server>localhost</pgsql_server>
	<pgsql_database>rfx</pgsql_database>
	<pgsql_port>5432</pgsql_port>
	<pgsql_username>rfxuser</pgsql_username>
	<pgsql_password>rfxuser1</pgsql_password>
	<pgsql_table>rfxcmd</pgsql_table> 
}}}

== The config tags ==

<pgsql_active>

Values 'yes' or 'no'
To activate PgSQL it has to be set to 'yes'
Default value = no

<pgsql_server>

 * The address of the PgSQL server
 * Default value = localhost

<pgsql_database>

 * The database that have the RFXcmd table
 * Default value = rfx

<pgsql_port>

 * The port of the PgSQL server
 * Default value = 5432

<pgsql_username>

 * Username to the PgSQL
 * Default value = rfxuser

<pgsql_password>

 * Password to the PgSQL
 * Default value = rfxuser1

<pgsql_table>

 * The table name, can contain schemaname
 * Default value = rfxcmd

= Other =

== Removal of table and database ==

If you want to remove all RFX related data from the database then following commands should do it. 

{{{
sudo -i -u postgres
psql -c 'DROP TABLE IF EXISTS rfxcmd;'
psql -c 'DROP DATABASE IF EXISTS rfx;'
psql -c 'DROP USER rfxuser;'
exit
}}}

---

=== PgSQL Configuration in RFXcmd ===

To be able to insert data from RFXcmd, the PgSQL has to be configured in the RFXcmd config file, config.xml. There are five XML tags that needs to be filled.

<pgsql_active>

Values 'yes' or 'no'
To activate PgSQL it has to be set to 'yes'
Default value = no

<pgsql_server>

 * The address of the PgSQL server
 * Default value = localhost

<pgsql_database>

 * The database that have the RFXcmd table
 * Default value = rfxcmd

<pgsql_port>

 * The port of the PgSQL server
 * Default value = 5432

<pgsql_username>

 * Username to the PgSQL
 * Default value = user

<pgsql_password>

 * Password to the PgSQL
 * Default value = password

<pgsql_table>

 * The table name, can contains schemaname
 * Default value = rfxcmd

Example
{{{
<pgsql_active>yes</pgsql_active>
<pgsql_server>localhost</pgsql_server>
<pgsql_database>rfxcmd</pgsql_database>
<pgsql_port>5432</pgsql_port>
<pgsql_username>user</pgsql_username>
<pgsql_password>password</pgsql_password>
<pgsql_table>rfx.rfxcmd</pgsql_table>
}}}

Note, if the pgsql configuration is changed when RFXcmd is running, it has to be stopped and started again for the changes to take effect.