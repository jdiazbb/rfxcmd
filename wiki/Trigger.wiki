#summary About the trigger function

= Introduction =

This page give detail information about the trigger functionality in the RFXcmd 0.3 and above. The trigger function in 0.24 will not support all functions listed here.

== Version ==

||Version||Date||Info||
||R1A||1-APR-2013||First version, default for 0.24 and 0.3||
||R1B||18-MAY-2013||Version 0.3 and above is now the only supported version for this functionality||

== Function ==

When each sensor data is decoded, it will check if the trigger regex pattern match with the list of tags it did load from the trigger.xml at the startup.

If a match is made it will execute the action statement, this will be executed in an own thread, meaning that RFXcmd will continue with it's listening loop and not care how the action statement did proceed. Therefor there is a timeout that can be set, if the action is not terminated by itself after it is finished.

If using the debug log level, the result code from each action run will be seen, and if a timeout is occurred it will printout result code -15. Normally it should be result code 0.

== Configuration ==

The trigger configuration is made in the config.xml file, which RFXcmd read each time it is started. If any changes are made, the RFXcmd has to be restarted before they take effect.

config tags:

<trigger_active>

 * Set to 'yes' or 'no'
 * default to 'no'
 * Activate the trigger function by writing 'yes' inside the trigger_active tag.

<trigger_onematch>no</trigger_onematch>

If 'trigger_onematch' is active, then only the first trigger action will be executed, all other matches in the trigger.xml file will not be executed.

<trigger_file>trigger.xml</trigger_file>

The location of the trigger.xml file where all the search patterns and action tags are, if no path is given the RFXcmd will look for it in it's own path.

<trigger_timeout>10</trigger_timeout>

Trigger timeout in seconds, if a trigger action takes longer to execute than the timer value set here, it will be terminated.

== Trigger file ==

The trigger action file is called trigger.xml and RFXcmd read the file when it is started, this means as well that if the file is changed the RFXcmd needs to be restarted.

The contents of the file is kept in the memory and checked against every sensor if they match the trigger sentence, if it matches then the "action" statement will be executed.

Regex should be used to specify the messages, and this is especially needed as the sequence number (byte 4) will always be incremental from the last one.

Example trigger.xml file;

{{{
<xml>
<trigger>
	<message>0A5201..0A01006A390269</message>
	<action>echo TEST</action>
</trigger>
<trigger>
	<message>0A5201000A01006A390269</message>
	<action>echo ACTION</action>
</trigger>
</xml>
}}}

By putting two dots instead of the sequence byte, the rfxcmd will match the rest of the message and execute the defined action if the message matches.

Parameters can be forwarded from the sensor data to the "action" statement.

Example;

{{{
<trigger>
        <message>0A5201..7001..........</message>
        <action>echo Data: $temperature$ $battery$ $signal$</action>
</trigger>
}}}

This sentence will printout the temperature, battery and signal every time a sensor with "0A5201" signature and "7001" id.

Example printout;

{{{
Data: 22.2 9 7
}}}

== Sensor data ==

Following sensors will forward parameters to the trigger script. This will be extended by user requests.

||Data id||Data name||Parameters||
||0x00||Interface control||n/a||
||0x01||Interface message||n/a||
||0x02||Receiver/Transmitter Msg||n/a||
||0x03||Undecoded Msg||n/a||
||0x10||Lightning1||$packettype$, $subtype$, $housecode$, $unitcode$, $command$, $signal$||
||0x11||Lightning2||$packettype$, $subtype$, $id$, $unitcode$, $command$, $dimlevel$, $signal$||
||0x12||Lightning3||$packettype$, $subtype$, $system$, $channel$, $command$, $signal$||
||0x13||Lightning4||$packettype$, $subtype$, $code$, $pulse$, $signal$||
||0x14||Lightning5||$packettype$, $subtype$, $id$, $unitcode$, $command$, $level$ (only 00), $signal$||
||0x15||Lightning6||$packettype$, $subtype$, $id$, $groupcode$, $unitcode$, $command$, $signal$||
||0x18||Curtain1||$packettype$, $subtype$||
||0x19||Blinds1||$packettype$, $subtype$||
||0x20||Security1||$packettype$, $subtype$, $id$, $status$, $battery$, $signal$||
||0x28||Camera1||$packettype$, $subtype$||
||0x30||Remote Control||$packettype$, $subtype$, $id$, $command$, $signal$||
||0x40||Thermostat1||$packettype$, $subtype$, $id$, $temperature$, $temperatureset$, $mode$, $status$, $signal$||
||0x41||Thermostat2||$packettype$, $subtype$||
||0x42||Thermostat3||$packettype$, $subtype$, $unitcode$, $command$, $signal$||
||0x50||Temperature||$packettype$, $subtype$, $id$, $temperature$, $battery$, $signal$||
||0x51||Humidity||$packettype$, $subtype$, $id$, $humidity$, $battery$, $signal$||
||0x52||Temperature and Humidity||$packettype$, $subtype$, $id$, $temperature$, $humidity$, $battery$, $signal$||
||0x53||Barometric||n/a||
||0x54||Temperature, Humidity and Barometric||$packettype$, $subtype$, $id$, $temperature$, $humidity$, $barometric$, $battery$, $signal$||
||0x55||Rain||$packettype$, $subtype$, $id$, $battery$, $signal$||
||0x56||Wind||$packettype$, $subtype$, $id$, $direction$, $average$(not 05), $temperature$(only 04), $windchill$(only 04), $windgust$, $battery$, $signal$||
||0x57||UV||$packettype$, $subtype$, $id$, $uv$, $temperature$ (only 03), $battery$, $signal$||
||0x59||Current||$packettype$, $subtype$, $id$, $counter$, $channel1$, $channel2$, $channel3$, $battery$, $signal$||
||0x5A||Energy||$packettype$, $subtype$, $id$, $instant$, $total$, $battery$, $signal$||
||0x5B||Current and Energy||$packettype$, $subtype$||
||0x70||RFXSensor||$packettype$, $subtype$, $id$, $temperature$ (only 00], $voltage$ (only 01 and 02), $message$ (only 03), $signal$||
||0x71||RFXMeter||$packettype$, $subtype$, $id$||
||0x72||FS20||$packettype$, $subtype$||

Note, if there is a value in (xx) it means that only that subtype will output the value, the "(xx)" should not be included in the "action" statement in the trigger.xml file.