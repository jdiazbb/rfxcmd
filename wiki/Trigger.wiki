#summary About the trigger function

= Introduction =

This page give detail information about the trigger functionality in the rfxcmd. The trigger function was changed in version 0.24 and 0.3, and this document is only valid for these versions and above.

The major change for the trigger in the pre-0.24 was that the trigger code was placed under each sensor decoding function, so that the parameters from the sensor data could be forwarded to the whatever script that is executed in the trigger file.

== Version ==

||Version||Date||Info||
||R1A||1-APR-2013||First version, default for 0.24 and 0.3||

== Trigger file ==

The trigger action file is called trigger.xml and RFXcmd read the file when it is started, this means as well that if the file is changed the RFXcmd needs to be restarted.

The contents of the file is kept in the memory and checked against every sensor if they match the trigger sentence, if it matches then the "action" statement will be executed.

Regex should be used to specify the messages, and this is especially needed as the sequence number (byte 4) will always be incremental from the last one.

Example trigger.xml file;

{{{
<xml>
<trigger>
	<message>0A5201..0A01006A390269</message>
	<action>echo TEST</action>
</trigger>
<trigger>
	<message>0A5201000A01006A390269</message>
	<action>echo ACTION</action>
</trigger>
</xml>
}}}

By putting two dots instead of the sequence byte, the rfxcmd will match the rest of the message and execute the defined action if the message matches.

Parameters can be forwarded from the sensor data to the "action" statement.

Example;

{{{
<trigger>
        <message>0A5201..7001..........</message>
        <action>echo Data: $temperature$ $battery$ $signal$</action>
</trigger>
}}}

This sentence will printout the temperature, battery and signal every time a sensor with "0A5201" signature and "7001" id.

Example printout;

{{{
Data: 22.2 9 7
}}}

== Sensor data ==

Following sensors will forward parameters to the trigger script. This will be extended by user requests.

||Data id||Data name||Parameters||
||0x00||Interface control||n/a||
||0x01||Interface message||n/a||
||0x02||Receiver/Transmitter Msg||n/a||
||0x03||Undecoed Msg||n/a||
||0x10||Lightning1||$id$||
||0x11||Lightning2||$id$||
||0x12||Lightning3||$id$||
||0x13||Lightning4||$id$||
||0x14||Lightning5||$id$, $unitcode$, $command$, $level$ (only subtype 00), $signal$||
||0x15||Lightning6||$id$||
||0x18||Curtain1||$id$||
||0x19||Blinds1||$id$||
||0x20||Security1||$id$||
||0x28||Camera1||$id$||
||0x30||Remote Control||$id$||
||0x40||Thermostat1||$id$, $temperature$, $temperature_set$, $mode$, $status$, $signal$||
||0x41||Thermostat2||$id$||
||0x42||Thermostat3||$id$||
||0x50||Temperature||$id$, $temperature$, $battery$, $signal$||
||0x51||Humidity||$id$, $humidity$, $battery$, $signal$||
||0x52||Temperature and Humidity||$id$, $temperature$, $humidity$, $battery$, $signal$||
||0x53||Barometric||$id$||
||0x54||Temperature, Humidity and Barometric||$id$, $temperature$, $humidity$, $barometric$, $battery$, $signal$||
||0x55||Rain||$id$, $battery$, $signal$||
||0x56||Wind||$id$, $direction$, $average$(not 05), $temperature$(only 04), $windchill$(only 04), $windgust$, $battery$, $signal$||
||0x57||UV||$id$, $temperature$, $battery$, $signal$||
||0x59||Current||$id$||
||0x5A||Energy||$id$||
||0x5B||Current and Energy||$id$||
||0x70||RFXSensor||$id$||
||0x71||RFXMeter||$id$||
||0x72||FS20||$id$||

Note, if there is a value in (xx) it means that only that subtype will output the value, the "(xx)" should not be included in the "action" statement in the trigger.xml file.